using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;

String InputFile = args[0];
Data = File.ReadAllLines(InputFile);
Output = File.Create(Path.ChangeExtension(InputFile, "TypeInfo.h"));

Byte[] Utf8Bom = [0xEF, 0xBB, 0xBF];
Byte[] Head = """
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by TypeInfoGenerator in KNSoft.SMBIOS project
//     https://github.com/KNSoft/KNSoft.SMBIOS
//     Do not change this file manually
// </auto-generated>
//------------------------------------------------------------------------------

#pragma once

#include "SMBIOS.h"
#include "SMBIOS.TypeInfo.inl"


"""u8.ToArray();

Output.Write(Utf8Bom);
Output.Write(Head);

static String AddEnumType(String EnumName)
{
    if (Enums.TryGetValue(EnumName, out var EnumTypeName))
    {
        return EnumTypeName;
    }

    for (UInt32 i = 1; i < Data.Length; i++)
    {
        if (Data[i].Trim().StartsWith("#define " + EnumName + '_'))
        {
            EnumTypeName = String.Empty;
            Output.Write("SMBIOS_TYPEINFO_SELECTANY\r\nSMBIOS_FIELD_ENUM "u8.ToArray());
            String[] Words = EnumName.Split('_');
            foreach (String Word in Words)
            {
                EnumTypeName += Char.ToUpper(Word[0]) + Word[1..Word.Length].ToLower();
            }
            EnumTypeName += "Enum";
            Output.Write(Encoding.UTF8.GetBytes(EnumTypeName));
            Output.Write("[] = {\r\n"u8.ToArray());
            do
            {
                Match Match = RxEnumDefine().Match(Data[i].Trim());
                if (!Match.Success || Match.Groups.Count != 3)
                {
                    Output.Write("};\r\n\r\n"u8.ToArray());
                    Enums.Add(EnumName, EnumTypeName);
                    return EnumTypeName;
                }
                Output.Write(Encoding.UTF8.GetBytes(
                    "    { u8\"" +
                    Match.Groups[2].Value.Split(" // ")[0].Replace("\"", "\\\"") + "\", " +
                    Match.Groups[1].Value + " },\r\n"));
                i++;
            } while (i < Data.Length);
        }
    }

    return String.Empty;
}

static String AddStructureType(String TypeNumber, String StructureName)
{
    UInt32 StartLine, EndLine;
    List<String> Fields = [];
    String Line;

    if (Structures.TryGetValue(StructureName, out var StructureTypeName))
    {
        return StructureTypeName;
    }

    StructureTypeName = StructureName + "_FIELDS";
    EndLine = (UInt32)Data.Length;
    for (StartLine = 1; StartLine < Data.Length - 1; StartLine++)
    {
        Line = Data[StartLine].Trim();
        if (Line.StartsWith("typedef ") && Line.EndsWith('_' + StructureName))
        {
            for (EndLine = StartLine + 1; EndLine < Data.Length; EndLine++)
            {
                if (Data[EndLine].Trim().StartsWith("} " + StructureName + ", *P" + StructureName + ";"))
                {
                    break;
                }
            }
            if (EndLine < Data.Length)
            {
                break;
            }
        }
    }
    if (EndLine >= (UInt32)Data.Length)
    {
        return String.Empty;
    }

    Fields = ResolveStructure(TypeNumber, StartLine, EndLine);
    Output.Write(Encoding.UTF8.GetBytes("#define " + StructureTypeName + "\\\r\n"));
    for (Int32 i = Fields.Count - 1; i >= 0; i--)
    {
        Output.Write("    "u8.ToArray());
        Output.Write(Encoding.UTF8.GetBytes(Fields[i]));
        if (i > 0)
        {
            Output.Write(",\\\r\n"u8.ToArray());
        }
    }
    Output.Write("\r\n\r\n"u8.ToArray());
    Structures.Add(StructureName, StructureTypeName);

    return StructureTypeName;
}

static List<String> ResolveStructure(String TypeNumber, UInt32 StartLine, UInt32 EndLine)
{
    List<String> Fields = [];
    Match Match;
    String Parent = String.Empty, ParentSpecName = String.Empty;
    UInt16 ParentBits = 0;
    Boolean InCommentBlock = false;

    for (UInt32 i = EndLine - 1; i > StartLine; i--)
    {
        String Field, FieldType, FieldName, FieldCount, SpecName = String.Empty, FieldComment, EnumName = String.Empty, TypeInfo;
        String[] FieldComments;
        UInt16 FieldBits;
        Int32 j;

        Field = Data[i].Trim();

        /* Skip comments */
        if (Field == "*/")
        {
            InCommentBlock = true;
            continue;
        } else if (Field.StartsWith("/*"))
        {
            InCommentBlock = false;
            continue;
        } else if (InCommentBlock)
        {
            continue;
        } else if (Field.StartsWith("//"))
        {
            continue;
        }

        /* Skip version control */
        if (Field.StartsWith("#if SMBIOS_VERSION ") ||
            Field.StartsWith("#else") ||
            Field.StartsWith("#endif // SMBIOS_VERSION "))
        {
            continue;
        }

        /* Inside structures */
        if (Field == "union")
        {
            Parent = String.Empty;
            ParentSpecName = String.Empty;
            ParentBits = 0;
            continue;
        }
        if (Field == "struct" || Field == "{" || Field == "};")
        {
            continue;
        }
        if (Field[0] == '}')
        {
            FieldComments = Field.Split(" // ");
            if (FieldComments.Length > 1)
            {
                Parent = Field[1..Field.IndexOf(';')].Trim();
                ParentSpecName = FieldComments[1];
            }
            continue;
        }

        /* Skip SAL */
        if (Field.StartsWith("_Field_size"))
        {
            Field = Field[(Field.IndexOf(')') + 2)..Field.Length];
        }

        /* Resolve each part of field */
        Match = RxField().Match(Field);
        if (!Match.Success || Match.Groups.Count != 4)
        {
            throw new Exception("Cannot resolve line " + i.ToString() + ": " + Field);
        }

        FieldType = Match.Groups[1].Value;
        FieldName = Match.Groups[2].Value;
        FieldBits = 0;
        FieldComment = Match.Groups[3].Value.Trim();
        if (FieldComment.StartsWith("//"))
        {
            FieldComment = FieldComment[2..FieldComment.Length].TrimStart();
        }
        FieldComments = FieldComment.Split(" // ");
        if (FieldName.EndsWith(']'))
        {
            FieldCount = FieldName[(FieldName.IndexOf('[') + 1)..(FieldName.Length - 1)];
            if (String.IsNullOrEmpty(FieldCount))
            {
                continue;
            }
            FieldName = FieldName[0..FieldName.IndexOf('[')];
        } else
        {
            FieldCount = String.Empty;
            j = FieldName.IndexOf(':');
            if (j >= 0)
            {
                FieldBits = UInt16.Parse(FieldName[(j + 1)..FieldName.Length].Trim());
                FieldName = FieldName[0..j].Trim();
            }
        }
        foreach (String Part in FieldComments)
        {
            if (String.IsNullOrEmpty(EnumName) && Part.StartsWith("SMBIOS_") && Part.EndsWith("_*"))
            {
                EnumName = Part[0..(Part.Length - 2)];
            } else if (String.IsNullOrEmpty(SpecName))
            {
                SpecName = Part.Trim();
            }
        }
        if (FieldBits == 0)
        {
            if (String.IsNullOrEmpty(EnumName))
            {
                if (FieldName == "Value" && Data[i - 2].Trim() == "union")
                {
                    TypeInfo =
                        "SMBIOS_DEFINE_FIELD_UINT(" +
                        TypeNumber + ", \"" + ParentSpecName + "\", " + Parent +
                        ".Value)";
                } else if (FieldType == "BYTE" || FieldType == "WORD" || FieldType == "DWORD" || FieldType == "QWORD")
                {
                    if (String.IsNullOrEmpty(SpecName))
                    {
                        continue;
                    }
                    TypeInfo =
                        "SMBIOS_DEFINE_FIELD_" + (String.IsNullOrEmpty(FieldCount) ? "UINT" : "RAW") + "(" +
                        TypeNumber + ", \"" + SpecName + "\", " + FieldName +
                        ")";
                } else if (FieldType == "UCHAR")
                {
                    TypeInfo =
                        "SMBIOS_DEFINE_FIELD_STRING(" +
                        TypeNumber + ", \"" + SpecName + "\", " + FieldName +
                        ")";
                } else if (FieldType == "SMBIOS_UUID")
                {
                    TypeInfo =
                        "SMBIOS_DEFINE_FIELD(" +
                        TypeNumber + ", \"" + SpecName + "\", " + FieldName +
                        ", SmbiosDataTypeUuid)";
                } else if (FieldType.StartsWith("SMBIOS_"))
                {
                    Fields.Add(AddStructureType(TypeNumber, FieldType));
                    TypeInfo =
                        "SMBIOS_DEFINE_FIELD_UINT(" +
                        TypeNumber + ", \"" + SpecName + "\", " + FieldName +
                        ".Value)";
                } else
                {
                    Console.WriteLine("Cannot resolve line " + i.ToString() + ": " + Field);
                    continue;
                }
            } else
            {
                TypeInfo =
                        "SMBIOS_DEFINE_FIELD_ENUM(" +
                        TypeNumber + ", \"" + SpecName + "\", " +
                        Match.Groups[2].Value + ", " + AddEnumType(EnumName) + ")";
            }
        } else
        {
            if (ParentBits == 0)
            {
                ParentBits = FieldType switch
                {
                    "BYTE" => 8,
                    "WORD" => 16,
                    "DWORD" => 32,
                    "QWORD" => 64,
                    _ => throw new ArgumentException("Unrecognized type of bit field: " + FieldType)
                };
            }
            SpecName = FieldComments[0][(FieldComments[0].IndexOf(' ') + 1)..FieldComments[0].Length].Replace("\"", "\\\"");
            ParentBits -= FieldBits;
            if (FieldBits == 1)
            {
                TypeInfo =
                    "SMBIOS_DEFINE_FIELD_BIT(\"" +
                    SpecName + "\", " + ParentBits.ToString() +
                    ")";
            } else
            {
                if (String.IsNullOrEmpty(EnumName))
                {
                    TypeInfo =
                        "SMBIOS_DEFINE_BIT_FIELD(\"" +
                        SpecName + "\", " + ParentBits.ToString() + ", " + FieldBits.ToString() +
                        ", SmbiosDataTypeUInt)";
                } else
                {
                    TypeInfo =
                        "SMBIOS_DEFINE_BIT_FIELD(\"" +
                        SpecName + "\", " + ParentBits.ToString() + ", " + FieldBits.ToString() +
                        ", SmbiosDataTypeEnum, SMBIOS_FIELD_ENUM_VALUES(" + AddEnumType(EnumName) +
                        "))";
                }
            }
        }
        Fields.Add(TypeInfo);
    }

    return Fields;
}

List<SmbiosType> Types = [];
Boolean InTypeRegion = false;
SmbiosType TypeDef = new();

for (UInt32 i = 1; i < Data.Length; i++)
{
    UInt32 j;
    Match Match;
    String TypeNumber;
    List<String> Fields = [];

    if (!InTypeRegion)
    {
        Match = RxTypeRegion().Match(Data[i]);
        if (!Match.Success || Match.Groups.Count != 3)
        {
            continue;
        }
        TypeDef = new()
        {
            Number = Match.Groups[2].Value,
            Name = Match.Groups[1].Value,
        };
        InTypeRegion = true;
        continue;
    }
    if (Data[i].StartsWith("#pragma endregion"))
    {
        goto _AddType;
    }

    /* Find type (line [j..i]) */
    Match = RxType().Match(Data[i]);
    if (!Match.Success || Match.Groups.Count != 5 ||
        Match.Groups[1].Value != Match.Groups[2].Value ||
        Match.Groups[3].Value != Match.Groups[4].Value)
    {
        continue;
    }
    for (j = i - 1; j > 0; j--)
    {
        if (Data[j] == "typedef struct _SMBIOS_" + Match.Groups[1].Value)
        {
            break;
        }
    }
    if (Data[j + 1] != "{" || Data[j + 2] != "    SMBIOS_HEADER Header;")
    {
        continue;
    }
    TypeNumber = Match.Groups[3].Value;
    j += 2;

    /* Output fields */
    Fields = ResolveStructure(TypeNumber, j, i);
    if (Fields.Count > 0)
    {
        Output.Write("SMBIOS_TYPEINFO_SELECTANY\r\nSMBIOS_FIELD_TYPE_INFO SmbiosType"u8.ToArray());
        Output.Write(Encoding.UTF8.GetBytes(TypeNumber));
        Output.Write("FieldInfo[] = {\r\n"u8.ToArray());
        for (Int32 k = Fields.Count - 1; k >= 0; k--)
        {
            Output.Write(Encoding.UTF8.GetBytes("    " + Fields[k] + ",\r\n"));
        }
        Output.Write("};\r\n\r\n"u8.ToArray());
    }

_AddType:
    TypeDef.HasDefination = Fields.Count > 0;
    Types.Add(TypeDef);
    InTypeRegion = false;
}

Output.Write("SMBIOS_TYPEINFO_SELECTANY\r\nSMBIOS_TYPE_INFO SmbiosTypeInfo[] = {\r\n"u8.ToArray());
foreach (var Type in Types)
{
    if (Type.HasDefination)
    {
        Output.Write(Encoding.UTF8.GetBytes("    SMBIOS_DEFINE_TYPE(" + Type.Number + ", \"" + Type.Name + "\"),\r\n"));
    } else
    {
        Output.Write(Encoding.UTF8.GetBytes("    { "+ Type.Number + ", \""+ Type.Name + "\", 0 },\r\n"));
    }
}
Output.Write("};\r\n"u8.ToArray());

Output.Dispose();

partial class Program
{
    [GeneratedRegex(@"#pragma region (.+) \(Type (\d+).+", RegexOptions.Compiled)]
    private static partial Regex RxTypeRegion();

    [GeneratedRegex(@"\} SMBIOS_(\w+), \*PSMBIOS_(\w+), SMBIOS_TYPE_(\d+), \*PSMBIOS_TYPE_(\d+);", RegexOptions.Compiled)]
    private static partial Regex RxType();

    [GeneratedRegex(@"(\w+) (.+);(.*)", RegexOptions.Compiled)]
    private static partial Regex RxField();

    [GeneratedRegex(@"#define (SMBIOS_\w+) +\(\S+\) // (.+)", RegexOptions.Compiled)]
    private static partial Regex RxEnumDefine();

    private static FileStream Output;
    private static String[] Data = [];
    private static readonly Dictionary<String, String> Enums = [];
    private static readonly Dictionary<String, String> Structures = [];
    private struct SmbiosType
    {
        public String Number;
        public String Name;
        public Boolean HasDefination;
    }
}
